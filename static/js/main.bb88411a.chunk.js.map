{"version":3,"sources":["serviceWorker.js","components/Task/EmojiPicker.jsx","components/Task/Task.styled.jsx","components/Task/Task.jsx","components/Column/Column.styled.jsx","components/Column/Column.jsx","components/NavBar/NavBar.styled.jsx","components/Drawer/index.jsx","components/NavBar/index.jsx","App.jsx","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","EmojiPicker","props","React","useState","anchorEl","setAnchorEl","handleClose","open","id","undefined","IconButton","aria-describedby","aria-label","style","align","size","variant","onClick","event","currentTarget","Popover","ref","createRef","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onSelect","onEmojiSelect","Container","styled","div","isDragging","ReactionContainer","Task","selectedEmojis","setSelectedEmojis","reactions","setReactions","handleReactionIncrease","emoji","handleEmojiSelect","currentEmoji","find","e","draggableId","task","index","provided","snapshot","draggableProps","dragHandleProps","innerRef","Grid","container","alignItems","item","xs","md","content","justify","map","key","Chip","name","label","avatar","Title","h3","TaskList","isDraggingOver","Column","column","title","droppableId","droppableProps","tasks","placeholder","Logo","h1","MenuNav","nav","MenuList","ul","MenuListItem","li","MenuItemLink","className","children","rest","useStyles","makeStyles","theme","drawerPaper","width","paddingRight","toolbar","position","right","top","drawerHeader","display","drawerTitle","marginTop","fontSize","drawerInputWrapper","justifyContent","drawerInput","margin","paddingLeft","drawerItem","border","borderRadius","DrawerComponent","classes","useTheme","setOpen","Toolbar","color","edge","Drawer","anchor","paper","direction","Divider","List","text","ListItem","ListItemText","primary","Input","NavBar","marginLeft","marginRight","App","state","columns","setColumns","useEffect","getColumns","showTasks","params","fetch","then","response","json","value","items","catch","error","getItemByDroppableId","getItemIndexByDroppableId","findIndex","JSON","stringify","Fragment","onDragUpdate","update","destination","opacity","length","document","body","backgroundColor","onDragEnd","result","source","start","finish","newStart","splice","newFinish","newState","changeTasksFromColumns","startIndex","data","reorderTasks","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.bb88411a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"emoji-mart/css/emoji-mart.css\";\nimport React from \"react\";\nimport { IconButton, Popover } from \"@material-ui/core\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport { Picker } from \"emoji-mart\";\n\nconst EmojiPicker = (props) => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleSelection = (event) => {\n        props.onEmojiSelect(event)\n        handleClose()\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? \"emoji-popover\" : undefined;\n\n    return <div>\n        <IconButton\n            aria-describedby={id}\n            aria-label=\"emoji-picker\"\n            style={{ align: \"right\" }}\n            size=\"small\"\n            variant=\"outlined\"\n            onClick={handleClick}\n        >\n            <InsertEmoticonIcon />\n        </IconButton>\n        <Popover\n            ref={React.createRef()}\n            id={id}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={handleClose}\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"center\",\n            }}\n            transformOrigin={{\n                vertical: \"top\",\n                horizontal: \"center\",\n            }}\n        >\n            <Picker onSelect={handleSelection} />\n        </Popover>\n    </div>\n}\n\nexport default EmojiPicker","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  padding: 8px;\n  margin-bottom: 8px;\n  background-color: ${(props) => (props.isDragging ? \"lightgreen\" : \"white\")};\n`;\n\nexport const ReactionContainer = styled.div`\n  margin-right: 4px;\n`;","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { Grid, Chip } from \"@material-ui/core\";\nimport { Emoji } from \"emoji-mart\";\nimport EmojiPicker from \"./EmojiPicker\"\n\nimport {Container, ReactionContainer} from './Task.styled'\n\nconst Task = (props) => {\n  const [selectedEmojis, setSelectedEmojis] = React.useState([]);\n  const [reactions, setReactions] = React.useState(0);\n\n  const handleReactionIncrease = (emoji) => {\n    emoji.reactions++;\n    setReactions(reactions + 1);\n  }\n\n  const handleEmojiSelect = (emoji) => {\n    const currentEmoji = selectedEmojis.find(e => e.id === emoji.id);\n    if (currentEmoji) {\n      handleReactionIncrease(currentEmoji);\n    } else {\n      emoji.reactions = 1;\n      setSelectedEmojis([...selectedEmojis, emoji]);\n    }\n  };\n\n  return (\n    <Draggable draggableId={props.task.id} index={props.index}>\n      {(provided, snapshot) => (\n        <Container\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n        >\n          <Grid container alignItems=\"center\">\n            <Grid container item xs={11} md={11}>\n              {props.task.content}\n            </Grid>\n            <Grid container justify=\"flex-end\" item xs={1} md={1}>\n              <EmojiPicker onEmojiSelect={handleEmojiSelect} />\n            </Grid>\n            <Grid container item alignItems=\"center\">\n              {selectedEmojis.map((emoji, index) => {\n                return (\n                  <ReactionContainer key={`emoji-reaction-${index}`}>\n                    <Chip\n                      variant=\"outlined\"\n                      size=\"small\"\n                      aria-label={emoji.name}\n                      label={emoji.reactions}\n                      avatar={<Emoji key=\"asd\" emoji={emoji} size={18} />}\n                      onClick={() => handleReactionIncrease(emoji)}\n                    />\n                  </ReactionContainer>\n                );\n              })}\n            </Grid>\n          </Grid>\n        </Container>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Task;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin: 8px;\n  border: 1px solid lightgrey;\n  border-radius: 2px;\n  width: 220px;\n\n  display: flex;\n  flex-direction: column;\n`;\nexport const Title = styled.h3`\n  padding: 8px;\n`;\nexport const TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2 ease;\n  background-color: ${(props) => (props.isDraggingOver ? \"skyblue\" : \"white\")};\n  flex-grow: 1;\n  min-height: 100px;\n`;","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport Task from \"../Task/Task\";\nimport { Container, TaskList, Title } from './Column.styled';\n\nconst Column = (props) => {\n  return (\n    <Container>\n      <Title>{props.column.title}</Title>\n      <Droppable droppableId={props.column.id}>\n        {(provided, snapshot) => (\n          <TaskList\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {props.tasks.map((task, index) => (\n              <Task key={task.id} task={task} index={index} />\n            ))}\n            {provided.placeholder}\n          </TaskList>\n        )}\n      </Droppable>\n    </Container>\n  );\n};\n\nexport default Column;\n","import React from 'react';\nimport styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 0 16px;\n    background-color: #fafafa;\n`;\n\nexport const Logo = styled.h1 `\n    font-size: 26px;\n`;\n\nexport const MenuNav = styled.nav`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\nexport const MenuList = styled.ul`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding-left: 0;\n`;\n\nexport const MenuListItem = styled.li`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: 0;\n    padding: 16px 0;\n    \n    & > *,\n    & > *:hover,\n    & > *:active {\n        color: #172B4D;\n        text-decoration: none;\n        cursor: pointer;\n    }\n`;\n\nconst MenuItem = ({className, children, ...rest}) => (\n    <MenuListItem>\n        <a className={className} {...rest}>\n            {children}\n        </a>\n    </MenuListItem>\n)\n\nexport const MenuItemLink = styled(MenuItem)``;\n","import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Input } from '@material-ui/core';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\n\n// import Input from './Input'\n\nconst useStyles = makeStyles((theme) => ({\n    drawerPaper: {\n      width: 240,\n      paddingRight: '20px'\n    },\n    toolbar: {\n      position: 'absolute',\n      right: 0,\n      top: -5\n    },\n    drawerHeader: {\n      display: 'flex'\n    },\n    drawerTitle: {\n      marginTop: '10px',\n      fontSize: '1.5rem'\n    },\n    drawerInputWrapper: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    drawerInput: {\n      margin: '10px',\n      paddingLeft: '5px'\n    },\n    drawerItem: {\n      border: '2px solid #eee',\n      borderRadius: '5px',\n      margin: '10px'\n    }\n  }));\n\nconst DrawerComponent = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const actionItems = ['Improve communication', 'Create a techdebt board', 'Talk with the PO', 'More team outings']\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n    return (\n        <>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n        <Drawer\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={open}\n            classes={{\n            paper: classes.drawerPaper,\n            }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n                {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n            </IconButton>\n            <h1 className={classes.drawerTitle}>Action Items</h1>\n          </div>\n          <Divider />\n          <List>\n            {actionItems.map((text) => (\n              <ListItem className={classes.drawerItem}>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n          <Divider />\n          <div className={classes.drawerInputWrapper}>\n            <Input className={classes.drawerInput} placeholder=\"Insert new action here\" />\n            <IconButton color=\"primary\" aria-label=\"add new action item\">\n              <AddBoxIcon />\n            </IconButton>\n          </div>\n        </Drawer>\n        </>\n    )\n}\n\nexport default DrawerComponent;\n","import React from 'react';\nimport { Container, Logo, MenuNav, MenuList, MenuItemLink } from './NavBar.styled';\nimport DrawerComponent from '../Drawer'\n\nconst NavBar = () => {\n    return (\n        <Container>\n            <Logo>\n                Retro-Board\n            </Logo>\n            <MenuNav>\n                <MenuList>\n                    <MenuItemLink style={{\n                        marginLeft: '26px',\n                        marginRight: '16px'\n                    }}>\n                        Home\n                    </MenuItemLink>\n                    <MenuItemLink>\n                        Boards\n                    </MenuItemLink>\n                </MenuList>\n            </MenuNav>\n            <DrawerComponent />\n        </Container>\n    )\n}\n\nexport default NavBar;\n","import '@atlaskit/css-reset';\nimport React, { useEffect, useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport Column from './components/Column/Column';\nimport NavBar from \"./components/NavBar\";\nimport { BASE_URL } from './constants';\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n`;\n\nconst App = () => {\n\tconst [columns, setColumns] = useState({ state: 'pending' });\n\n\tuseEffect(() => {\n\t\tgetColumns();\n\t}, []);\n\n\tconst getColumns = (showTasks = true) => {\n\t\tlet params = `?`;\n\n\t\tif (showTasks) {\n\t\t\tparams += `withTask=true`;\n\t\t}\n\n\t\tfetch(`${BASE_URL}/column${params}`)\n\t\t\t.then(response => response.json())\n\t\t\t.then(value => setColumns({ state: 'resolved', items: value }))\n\t\t\t.catch(error => setColumns({ state: 'rejected', error }));\n\t};\n\n\tconst changeTasksFromColumns = (start, source, finish, destination) => {\n\t\tconst task = start.tasks[source.index];\n\n\t\tconst newStart = [...start.tasks];\n\t\tnewStart.splice(source.index, 1);\n\n\t\tconst newFinish = [...finish.tasks];\n\t\tnewFinish.splice(destination.index, 0, task);\n\n\t\tconst newState = columns.items.map(column => {\n\t\t\tif (column.id === source.droppableId) {\n\t\t\t\tcolumn.tasks = newStart;\n\t\t\t} else if (column.id === destination.droppableId) {\n\t\t\t\tcolumn.tasks = newFinish;\n\t\t\t}\n\n\t\t\treturn column;\n\t\t});\n\n\t\tsetColumns({ state: 'resolved', items: newState });\n\t};\n\n\tconst reorderTasks = (start, source, startIndex, destination) => {\n\t\tconst task = start.tasks[source.index];\n\n\t\tconst newStart = [...start.tasks];\n\t\tnewStart.splice(source.index, 1);\n\t\tnewStart.splice(destination.index, 0, task);\n\n\t\tconst data = {\n\t\t\t...columns,\n\t\t\titems: [...columns.items]\n\t\t};\n\t\tdata.items[startIndex].tasks = newStart;\n\n\t\tsetColumns({ state: 'resolved', items: data.items });\n\t};\n\n\tconst getItemByDroppableId = droppableId =>\n\t\tcolumns.items.find(column => column.id === droppableId);\n\tconst getItemIndexByDroppableId = droppableId =>\n\t\tcolumns.items.findIndex(column => column.id === droppableId);\n\n\tconst onDragUpdate = update => {\n\t\tconst { destination } = update;\n\n\t\tlet opacity = 0;\n\n\t\tif (destination) {\n\t\t\tconst index = getItemIndexByDroppableId(destination.droppableId);\n\t\t\topacity = destination.index / columns.items[index].tasks.length;\n\t\t}\n\n\t\tdocument.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`;\n\t};\n\n\tconst onDragEnd = result => {\n\t\tdocument.body.style.color = 'inherit';\n\t\tdocument.body.style.backgroundColor = 'inherit';\n\t\tconst { destination, source } = result;\n\n\t\tif (!destination) return;\n\n\t\tif (\n\t\t\tdestination.droppableId === source.droppableId &&\n\t\t\tdestination.index === source.index\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst start = getItemByDroppableId(source.droppableId);\n\t\tconst finish = getItemByDroppableId(destination.droppableId);\n\n\t\t// BEHAVIOUR: Re-order items inside the same column\n\t\tif (start === finish) {\n\t\t\treorderTasks(\n\t\t\t\tstart,\n\t\t\t\tsource,\n\t\t\t\tgetItemIndexByDroppableId(source.droppableId),\n\t\t\t\tdestination\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// BEHAVIOUR: Moving from one list to another\n\t\tchangeTasksFromColumns(start, source, finish, destination);\n\t};\n\n\tif (columns.state === 'pending') {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tif (columns.state === 'rejected') {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tError: <pre>{JSON.stringify(columns.error, null, 2)}</pre>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<NavBar/>\n\t\t\t<DragDropContext onDragUpdate={onDragUpdate} onDragEnd={onDragEnd}>\n\t\t\t\t<Container>\n\t\t\t\t\t{columns.items.map(column => {\n\t\t\t\t\t\tconst tasks = column.tasks;\n\t\t\t\t\t\treturn <Column key={column.id} column={column} tasks={tasks} />;\n\t\t\t\t\t})}\n\t\t\t\t</Container>\n\t\t\t</DragDropContext>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default App;\n","const BASE_URL = 'http://localhost:8080'\n\nexport { BASE_URL }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}